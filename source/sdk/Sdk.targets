<?xml version="1.0" encoding="utf-8"?>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~ Repository: https://github.com/simplexidev/sdbuildsdk                                                                ~
~ Package:    SimplexiDev.Build.Sdk                                                                                    ~
~ File:       /sdk/Sdk.targets                                                                                         ~
~ License:    https://github.com/simplexidev/sdbuildsdk/blob/main/LICENSE.md                                           ~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- SimplexiDev.Build.targets Imports
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <PropertyGroup>
    <ImportSimplexiDevBuildTargets Condition="'$(ImportSimplexiDevBuildTargets)'!='false'">true</ImportSimplexiDevBuildTargets>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ImportSimplexiDevBuildTargets)'=='true' AND '$(SimplexiDevBuildTargetsPath)'==''">
    <_SimplexiDevBuildTargetsFile Condition="'$(_SimplexiDevBuildTargetsFile)' == ''">SimplexiDev.Build.targets</_SimplexiDevBuildTargetsFile>
    <_SimplexiDevBuildTargetsBasePath Condition="'$(_SimplexiDevBuildTargetsBasePath)'==''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), '$(_SimplexiDevBuildTargetsFile)'))</_SimplexiDevBuildTargetsBasePath>
    <SimplexiDevBuildTargetsPath Condition="'$(_SimplexiDevBuildTargetsBasePath)' != '' and '$(_SimplexiDevBuildTargetsFile)' != ''">$([System.IO.Path]::Combine('$(_SimplexiDevBuildTargetsBasePath)', '$(_SimplexiDevBuildTargetsFile)'))</SimplexiDevBuildTargetsPath>
  </PropertyGroup>
  <Import Condition="'$(ImportSimplexiDevBuildTargets)'=='true' AND Exists('$(SimplexiDevBuildTargetsPath)')"
          Project="$(SimplexiDevBuildTargetsPath)" />

  <!-- Assembly Attributes
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(ProjectType)' == 'Library'">
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(MSBuildProjectName).Tests</_Parameter1>
      <_Parameter1_TypeName>System.String</_Parameter1_TypeName>
    </AssemblyAttribute>
  </ItemGroup>

  <!-- Source Files
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup>
    <Compile Include="**\*.cs" />
  </ItemGroup>

  <ItemGroup>
    <SourceRoot Include="$(RepositorySourcesPath)/"/>
  </ItemGroup>
  
  <ItemGroup Condition="'$(IsPackable)' == 'true' AND '$(ProjectType)' == 'Sdk'">
    <None Include="Sdk\**" Pack="true" PackagePath="Sdk\" />
  </ItemGroup>

  <!-- Resource Files
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup>
    <_SDResources Include="res\*.resx" />
    <EmbeddedResource Include="@(_SDResources)">
      <LogicalName>$(RootNamespace).Resources.$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)'))</LogicalName>
    </EmbeddedResource>
  </ItemGroup>
  
  <!-- Project-specific README file
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(IsPackable)' == 'true'">
    <None Include="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <!-- SourceLink (GitHub)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(IsPackable)'=='true'">
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="all" />
  </ItemGroup>

  <!-- SourceLink (GitHub)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(IsPackable)'=='true'">
    <PackageReference Include="DotNet.ReproducibleBuilds" Version="1.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Source Generators
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(ProjectType)'=='Generator'">
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.7.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4" PrivateAssets="all" />
  </ItemGroup>

  <!-- MSTest v2
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <ItemGroup Condition="'$(ProjectType)'=='Tests'">
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.7.2" />
    <PackageReference Include="MSTest.TestAdapter" Version="3.1.1" />
    <PackageReference Include="MSTest.TestFramework" Version="3.1.1" />
  </ItemGroup>

  <!-- Custom Tasks/Targets
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

  <UsingTask TaskName="_ValidateSDBSdkRepositoryProperties" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ReturnValue ParameterType="System.Boolean" Output="true" />
      <RepoName ParameterType="System.String" Required="true" />
      <RepoPath ParameterType="System.String" Required="true" />
      <SourcesPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
     <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        if (string.IsNullOrWhiteSpace(RepoPath) || !Directory.Exists(RepoPath))
            ReturnValue = false;
        if (!Directory.Exists(Path.Combine(RepoPath, ".git")) && !File.Exists(Path.Combine(RepoPath, ".git")))
            ReturnValue = false;
        if (string.IsNullOrWhiteSpace(RepoName))
            ReturnValue = false;
        if (string.IsNullOrWhiteSpace(SourcesPath) || !Directory.Exists(SourcesPath))
            ReturnValue = false;
        ReturnValue = true;
   ]]></Code>
    </Task>
  </UsingTask>

  <Target Name="ValidateRepositoryProperties">
    <_ValidateSDBSdkRepositoryProperties RepoName="$(RepositoryName)" RepoPath="$(RepositoryPath)" SourcesPath="$(RepositorySourcesPath)">
      <Output PropertyName="RepositoryPropertiesAreValid" TaskParameter="ReturnValue" />
    </_ValidateSDBSdkRepositoryProperties>
    <Error Condition="'$(RepositoryPropertiesAreValid)' == 'false'" Text="Repository properties are invalid." Code="SDBSDK0001" ContinueOnError="ErrorAndStop" />
  </Target>

  <UsingTask TaskName="_ValidateSDBSdkProjectType" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ReturnValue ParameterType="System.Boolean" Output="true" />
      <ProjType ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs"><![CDATA[
        string[] validProjectTypes = new string[]
        {
            "Sdk",
            "App",
            "Library",
            "Tests",
            "Generator",
            "Tool"
        }

        ReturnValue = validProjectTypes.Contains(ProjType);
   ]]></Code>
    </Task>
  </UsingTask>

  <Target Name="ValidateProjectType">
    <_ValidateSDBSdkProjectType ProjType="$(ProjectType)">
      <Output PropertyName="ProjectTypeIsValid" TaskParameter="ReturnValue" />
    </_ValidateSDBSdkProjectType>
    <Error Condition="'$(ProjectTypeIsValid)' == 'false'" Text="Project type is invalid." Code="SDBSDK0002" ContinueOnError="ErrorAndStop" />
  </Target>

  <PropertyGroup>
    <InitialTargets>ValidateProjectType;ValidateRepositoryProperties;$(InitialTargets)</InitialTargets>
  </PropertyGroup>

  <!-- Microsoft.NET.Sdk Import
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk"/>

</Project>